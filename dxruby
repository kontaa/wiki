
require 'dxruby'

class ImagePane
  def initialize(h)
    @image = Image.load(h[:file])
    @x, @y = h[:x], h[:y]

    @ix, @iy = 0, 0
    @xy_div = 3

    @iw = [h[:w], biw].min
    @ih = [h[:h], bih].min
    set_slice
  end

  def xd
    @iw.div(@xy_div)
  end

  def yd
    @ih.div(@xy_div)
  end

  def biw
     @image.width
  end

  def bih
     @image.height
  end

  def move_left
    if @ix - xd < 0
      @ix = 0
    else
      @ix -= xd
    end
    set_slice
  end

  def move_right
    w = biw - @iw
    if @ix + xd > w
      @ix = w
    else
      @ix +=xd
    end
    set_slice
  end

  def move_up
    if @iy - yd < 0
      @iy = 0
    else
      @iy -= yd
    end
    set_slice
  end

  def move_down
    h = bih - @ih
    if @iy + yd > h
      @iy = h
    else
      @iy += yd
    end
    set_slice
  end

  def set_slice
    @slice = @image.slice(@ix, @iy, @iw, @ih)
  end

  def draw
    Window.draw(@x, @y, @slice)
  end

  def argb(x, y)
    @slice[x - @x, y - @y]
  end

end

class TextPane
  def initialize(h)
    #font_size, x=10, y=3)
    @font = Font.new(h[:font_size])
    @x = h[:x]
    @y = h[:y]
    @fmt1 = "HSV (%3.0f, %5.3f, %5.3f)"
    @fmt2 = "RGB (%3d, %3d, %3d)"
  end

  def draw(hsv, argb)
    m1 = sprintf(@fmt1, hsv.h, hsv.s, hsv.v)
    m2 = sprintf(@fmt2, argb[-3], argb[-2], argb[-1])
    Window.draw_font(@x, @y, m1 + ",  " + m2, @font)
  end
end

class HSVPane < Sprite
  def initialize(h)
    super
    @r = h[:r]
    self.x = h[:x]
    self.y = h[:y]
    self.image = reset_image
  end

  def reset
    @image = reset_image
  end

  def reset_image
    r = @r
    x0 = r
    y0 = r
    gray = [255, 100, 100, 100]
    image = Image.new(r * 2, r * 2)
    image.circle(x0, y0, r, gray)
    image
  end

  def update(hsv)
    t = hsv.h / 360.0 * 2 * Math::PI
    x = @r + (hsv.s * @r * Math.cos(t)).to_i
    y = @r + (hsv.s * @r * Math.sin(t)).to_i
    self.image.circle(x, y, 1, hsv.argb)
  end
end

class VPane < Sprite
  def initialize(h)
    super
    @r = h[:r]
    @h = h[:h]
    x, y = h[:x], h[:y]
    self.x = x - @r
    self.y = y - @h/2
    self.angle = 270 - (h[:angle] || 0)
    self.image = reset_image
  end

  def reset
    self.image = reset_image
  end

  def reset_image
    w = @r * 2
    x1 = 0
    y1 = 0
    x2 = @r * 2
    y2 = @h
    gray = [255, 100, 100, 100]
    image = Image.new(w, @h)
    image.box(x1, y1, x2, y2, gray)
    image
  end

  def update(hsv)
    t = (hsv.h + (-self.angle + 0.0)) / 360.0 * 2 * Math::PI
    x = @r + (hsv.s * @r * Math.cos(t)).to_i
    y = @h - (hsv.v * @h).to_i
    dr = 1
    self.image.circle(x, y, dr, hsv.argb)
  end
end

class HSV
  attr_reader :h, :s, :v, :argb

  def initialize
    @h = 0
    @s = 0
    @v = 0
    @argb = [0, 0, 0, 0]
  end

  def set(argb)
    @argb = argb
    a, r, g, b = argb

    r = r / 255.0
    g = g / 255.0
    b = b / 255.0

    cmin = [r, g, b].min
    cmax = [r, g, b].max

    if cmin == cmax
      h = 0.0
      v = cmin
      s = 0.0
    else
      if cmin == b
        h = 60 * (g - r) / (cmax -cmin) + 60
      end
      if cmin == r
        h = 60 * (b - g) / (cmax -cmin) + 180
      end
      if cmin == g
        h = 60 * (r - b) / (cmax -cmin) + 300
      end
      v = cmax
      s = (cmax - cmin)        # 円錐モデル
      #s = (cmax - cmin) / cmax # 円柱モデル
    end

    @h, @s, @v = h, s, v

    self
  end
end


file = "c:\\tmp\\img\\035.jpg"
file = "c:\\tmp\\img\\001.jpg"
file = "c:\\tmp\\img\\aa.png"

Window.x = 10
Window.y = 10
Window.width = 1920 - 10*2
Window.height = 1080 - 10*2 - 90

r = 380
h = 140
x0, y0     = 10             , 30
x1, y1, a1 = x0+r           , y0+2*r+10+h/2.0, 270 
x2, y2, a2 = x0+2*r+10+h/2.0, y0+  r         ,   0
x3, y3     = x2+h/2.0+10    , y0

hsvp = HSVPane.new(x:x0, y:y0, r:r)
vp  =    VPane.new(x:x1, y:y1, r:r, h:h, angle:a1)
vp2 =    VPane.new(x:x2, y:y2, r:r, h:h, angle:a2)

imagep   = ImagePane.new(file:file, x:x3, y:y3, w:900, h:900)
textp = TextPane.new(font_size:11, x:x0, y:3)

hsv = HSV.new

Window.loop do
  break if Input.key_push?(K_ESCAPE) 
  break if Input.key_push?(K_Q) 
  hsvp.reset    if Input.key_push?(K_R) # r

  if Input.key_push?(K_J) || Input.key_push?(K_A)
    imagep.move_left
  end
  if Input.key_push?(K_L) || Input.key_push?(K_D)
    imagep.move_right
  end
  if Input.key_push?(K_I) || Input.key_push?(K_W)
    imagep.move_up
  end
  if Input.key_push?(K_K) || Input.key_push?(K_S)
    imagep.move_down
  end


  mx = Input.mouse_pos_x
  my = Input.mouse_pos_y

  dd = 3
  (-dd).upto(dd) do |x|
    (-dd).upto(dd) do |y|
      argb = imagep.argb(mx + x, my + y)
      hsv = hsv.set(argb)

      vp.update(hsv)
      vp2.update(hsv)
      hsvp.update(hsv)
    end
  end

  argb = imagep.argb(mx + 0, my + 0)
  hsv = hsv.set(argb)
  textp.draw(hsv, argb)

  imagep.draw
  hsvp.draw
  vp.draw
  vp2.draw
end


